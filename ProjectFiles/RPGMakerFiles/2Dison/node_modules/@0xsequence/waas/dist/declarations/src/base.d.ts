import { GetTransactionReceiptArgs, Intent, OpenSessionArgs, SendContractCallArgs, SendERC1155Args, SendERC20Args, SendERC721Args, SendTransactionsArgs, SignedIntent, SignMessageArgs } from "./intents/index.js";
import { Store } from "./store.js";
import { OpenSessionResponse } from "./intents/responses.js";
import { SimpleNetwork, WithSimpleNetwork } from "./networks.js";
import { IntentDataFederateAccount, IntentDataFeeOptions, IntentDataFinishValidateSession, IntentDataGetSession, IntentDataGetTransactionReceipt, IntentDataInitiateAuth, IntentDataListAccounts, IntentDataOpenSession, IntentDataSendTransaction, IntentDataSignMessage, IntentDataValidateSession } from "./clients/intent.gen.js";
import { SubtleCryptoBackend } from "./subtle-crypto.js";
import { SecureStoreBackend } from "./secure-store.js";
import { ChallengeIntentParams } from "./challenge.js";
export type SessionAuthProofArgs = {
    nonce?: string;
};
export type ExtraArgs = {
    lifespan?: number;
};
export type ExtraTransactionArgs = ExtraArgs & {
    identifier: string;
};
export type SequenceBaseConfig = {
    network: SimpleNetwork;
};
export type Observer<T> = (value: T | null) => any;
export declare class SequenceWaaSBase {
    readonly config: SequenceBaseConfig;
    private readonly store;
    private readonly cryptoBackend;
    private readonly secureStoreBackend;
    private readonly status;
    private readonly sessionId;
    private readonly wallet;
    private sessionObservers;
    constructor(config?: SequenceBaseConfig, store?: Store, cryptoBackend?: SubtleCryptoBackend | null, secureStoreBackend?: SecureStoreBackend | null);
    getAddress(): Promise<string>;
    private getWalletAddress;
    private commonArgs;
    /**
     * Builds a payload that can be sent to the WaaS API to sign a transaction.
     * It automatically signs the payload, and attaches the current wallet address.
     *
     * @param packet The action already packed into a packet
     * @returns A payload that can be sent to the WaaS API
     */
    private signIntent;
    signUsingSessionKey(message: string | Uint8Array): Promise<string>;
    private gettingSessionIdPromise;
    /**
     * This method will return session id.
     *
     * @returns an id of the session
     */
    getSessionId(): Promise<string>;
    /**
     * This method will initiate a sign-in process with the waas API. It must be performed
     * when the user wants to sign in to the app, in parallel with the authentication of the
     * application's own authentication system.
     *
     * This method begins the sign-in process, but does not complete it. The returned payload
     * must be sent to the waas API to complete the sign-in. The waas API will return a receipt
     * that must be sent to the `completeSignIn` method to complete the sign-in.
     *
     * @param idToken Information about the user that can be used to prove their identity
     * @returns a session payload that **must** be sent to the waas API to complete the sign-in
     * @throws {Error} If the session is already signed in or there is a pending sign-in
     */
    signInWithIdToken(idToken: string): Promise<SignedIntent<IntentDataOpenSession>>;
    initiateGuestAuth(): Promise<SignedIntent<IntentDataInitiateAuth>>;
    initiateEmailAuth(email: string): Promise<SignedIntent<IntentDataInitiateAuth>>;
    initiateIdTokenAuth(idToken: string, exp?: number): Promise<SignedIntent<IntentDataInitiateAuth>>;
    initiateStytchAuth(idToken: string, exp?: number): Promise<SignedIntent<IntentDataInitiateAuth>>;
    initiatePlayFabAuth(titleId: string, sessionTicket: string): Promise<SignedIntent<IntentDataInitiateAuth>>;
    completeAuth(params: ChallengeIntentParams, optParams: Partial<OpenSessionArgs>): Promise<SignedIntent<IntentDataOpenSession>>;
    onSessionStateChanged(callback: Observer<string>): () => void;
    signOut({ lifespan, sessionId }?: {
        sessionId?: string;
    } & ExtraArgs): Promise<SignedIntent<import("./clients/intent.gen.js").IntentDataCloseSession>>;
    signOutSession(sessionId: string): Promise<SignedIntent<import("./clients/intent.gen.js").IntentDataCloseSession>>;
    listSessions(): Promise<SignedIntent<import("./clients/intent.gen.js").IntentDataListSessions>>;
    completeSignOut(): Promise<void>;
    /**
     * This method will complete a sign-in process with the waas API. It must be performed
     * after the `signIn` method, when the waas API has returned a receipt.
     *
     * This method completes the sign-in process by validating the receipt's proof.
     * If the proof is invalid or there is no pending sign-in, it will throw an error.
     *
     * After this method is called, the wallet is ready to be used to sign transactions.
     *
     * @param receipt The receipt returned by the waas API after the `signIn` method
     * @returns The wallet address of the user that signed in
     * @throws {Error} If there is no pending sign-in or the receipt is invalid
     */
    completeSignIn(receipt: OpenSessionResponse): Promise<string>;
    isSignedIn(): Promise<boolean>;
    sessionAuthProof(args: WithSimpleNetwork<SessionAuthProofArgs> & ExtraArgs): Promise<SignedIntent<import("./clients/intent.gen.js").IntentDataSessionAuthProof>>;
    /**
     * This method can be used to sign message using waas API. It can only be used
     * after successfully signing in with the `signIn` and `completeSignIn` methods.
     *
     * The method does not sign the message. It only returns a payload
     * that must be sent to the waas API to complete the sign process.
     *
     * @param chainId The network on which the message will be signed
     * @param message  The message that will be signed
     * @return a payload that must be sent to the waas API to complete sign process
     */
    signMessage(args: WithSimpleNetwork<SignMessageArgs> & ExtraArgs): Promise<SignedIntent<IntentDataSignMessage>>;
    /**
     * This method can be used to send transactions to the waas API. It can only be used
     * after successfully signing in with the `signIn` and `completeSignIn` methods.
     *
     * The method does not send the transactions to the network. It only returns a payload
     * that must be sent to the waas API to complete the transaction.
     *
     * @param transactions The transactions to be sent
     * @param chainId The network on which the transactions will be sent
     * @returns a payload that must be sent to the waas API to complete the transaction
     */
    sendTransaction(args: WithSimpleNetwork<SendTransactionsArgs> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataSendTransaction>>;
    getTransactionReceipt(args: WithSimpleNetwork<GetTransactionReceiptArgs> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataGetTransactionReceipt>>;
    sendERC20(args: WithSimpleNetwork<SendERC20Args> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataSendTransaction>>;
    sendERC721(args: WithSimpleNetwork<SendERC721Args> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataSendTransaction>>;
    sendERC1155(args: WithSimpleNetwork<SendERC1155Args> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataSendTransaction>>;
    callContract(args: WithSimpleNetwork<SendContractCallArgs> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataSendTransaction>>;
    feeOptions(args: WithSimpleNetwork<SendTransactionsArgs> & ExtraTransactionArgs): Promise<SignedIntent<IntentDataFeeOptions>>;
    validateSession({ deviceMetadata }: {
        deviceMetadata: string;
    }): Promise<SignedIntent<IntentDataValidateSession>>;
    getSession(): Promise<SignedIntent<IntentDataGetSession>>;
    finishValidateSession(salt: string, challenge: string): Promise<SignedIntent<IntentDataFinishValidateSession>>;
    listAccounts(): Promise<SignedIntent<IntentDataListAccounts>>;
    linkAccount(params: ChallengeIntentParams): Promise<SignedIntent<IntentDataFederateAccount>>;
    removeAccount({ accountId }: {
        accountId: string;
    }): Promise<SignedIntent<import("./clients/intent.gen.js").IntentDataRemoveAccount>>;
    getIdToken({ nonce }: {
        nonce?: string;
    }): Promise<SignedIntent<import("./clients/intent.gen.js").IntentDataGetIdToken>>;
    batch(intents: Intent<IntentDataSendTransaction>[]): Promise<SignedIntent<IntentDataSendTransaction>>;
    private signalObservers;
    updateIntentTime<T>(intent: SignedIntent<T>, time: Date): Promise<SignedIntent<T>>;
}
