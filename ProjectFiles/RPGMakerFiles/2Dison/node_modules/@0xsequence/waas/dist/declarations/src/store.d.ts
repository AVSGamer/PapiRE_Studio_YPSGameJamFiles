export interface Store {
    get(key: string): Promise<string | null>;
    set(key: string, value: string | null): Promise<void>;
}
export declare class StoreObj<T extends string | undefined> {
    private readonly store;
    private readonly key;
    private readonly defaultValue;
    constructor(store: Store, key: string, defaultValue: T);
    get(): Promise<T>;
    set(value: T): Promise<void>;
}
export declare class LocalStore implements Store {
    private readonly store;
    constructor();
    get(key: string): Promise<string | null>;
    set(key: string, value: string | null): Promise<void>;
}
export declare class WindowLocalStorage implements Store {
    static isAvailable(): boolean;
    constructor();
    get(key: string): Promise<string | null>;
    set(key: string, value: string | null): Promise<void>;
}
export declare class MemoryStore implements Store {
    private store;
    constructor();
    get(key: string): Promise<string | null>;
    set(key: string, value: string | null): Promise<void>;
}
