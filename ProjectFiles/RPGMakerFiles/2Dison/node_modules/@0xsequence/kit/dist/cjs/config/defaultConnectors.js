"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultUniversalConnectors = exports.getDefaultWaasConnectors = exports.getDefaultConnectors = void 0;
const apple_1 = require("../connectors/apple");
const appleWaas_1 = require("../connectors/apple/appleWaas");
const coinbaseWallet_1 = require("../connectors/coinbaseWallet");
const email_1 = require("../connectors/email");
const emailWaas_1 = require("../connectors/email/emailWaas");
const facebook_1 = require("../connectors/facebook");
const google_1 = require("../connectors/google");
const googleWaas_1 = require("../connectors/google/googleWaas");
const sequence_1 = require("../connectors/sequence");
const twitch_1 = require("../connectors/twitch");
const walletConnect_1 = require("../connectors/walletConnect");
const getKitConnectWallets_1 = require("../utils/getKitConnectWallets");
const getDefaultConnectors = (walletType, options) => {
    if (walletType === 'waas') {
        return (0, exports.getDefaultWaasConnectors)(options);
    }
    else if (walletType === 'universal') {
        return (0, exports.getDefaultUniversalConnectors)(options);
    }
};
exports.getDefaultConnectors = getDefaultConnectors;
const getDefaultWaasConnectors = (options) => {
    const { projectAccessKey, waasConfigKey, appName, enableConfirmationModal, defaultChainId, isDev } = options;
    const wallets = [];
    if (options.email !== false) {
        wallets.push((0, emailWaas_1.emailWaas)({
            projectAccessKey,
            waasConfigKey,
            enableConfirmationModal,
            network: defaultChainId,
            isDev
        }));
    }
    if (options.google || options.googleClientId) {
        const googleClientId = (options.google && options.google.clientId) || options.googleClientId;
        wallets.push((0, googleWaas_1.googleWaas)({
            projectAccessKey,
            waasConfigKey,
            googleClientId,
            enableConfirmationModal,
            network: defaultChainId,
            isDev
        }));
    }
    if (options.apple || (options.appleClientId && options.appleRedirectURI)) {
        const appleClientId = (options.apple && options.apple.clientId) || options.appleClientId;
        const appleRedirectURI = (options.apple && options.apple.redirectURI) || options.appleRedirectURI;
        wallets.push((0, appleWaas_1.appleWaas)({
            projectAccessKey,
            waasConfigKey,
            appleClientId,
            appleRedirectURI,
            enableConfirmationModal,
            network: defaultChainId,
            isDev
        }));
    }
    if (options.coinbase !== false) {
        wallets.push((0, coinbaseWallet_1.coinbaseWallet)({
            appName
        }));
    }
    if (options.walletConnect || options.walletConnectProjectId) {
        const projectId = (options.walletConnect && options.walletConnect?.projectId) || options.walletConnectProjectId;
        wallets.push((0, walletConnect_1.walletConnect)({
            projectId
        }));
    }
    return (0, getKitConnectWallets_1.getKitConnectWallets)(projectAccessKey, wallets);
};
exports.getDefaultWaasConnectors = getDefaultWaasConnectors;
const getDefaultUniversalConnectors = (options) => {
    const { projectAccessKey, appName, defaultChainId } = options;
    const wallets = [];
    if (options.email !== false) {
        wallets.push((0, email_1.email)({
            defaultNetwork: defaultChainId,
            connect: {
                app: appName
            }
        }));
    }
    if (options.google !== false) {
        wallets.push((0, google_1.google)({
            defaultNetwork: defaultChainId,
            connect: {
                app: appName
            }
        }));
    }
    if (options.facebook !== false) {
        wallets.push((0, facebook_1.facebook)({
            defaultNetwork: defaultChainId,
            connect: {
                app: appName
            }
        }));
    }
    if (options.twitch !== false) {
        wallets.push((0, twitch_1.twitch)({
            defaultNetwork: defaultChainId,
            connect: {
                app: appName
            }
        }));
    }
    if (options.apple !== false) {
        wallets.push((0, apple_1.apple)({
            defaultNetwork: defaultChainId,
            connect: {
                app: appName
            }
        }));
    }
    if (options.sequence !== false) {
        wallets.push((0, sequence_1.sequence)({
            defaultNetwork: defaultChainId,
            connect: {
                app: appName
            }
        }));
    }
    if (options.walletConnect || options.walletConnectProjectId) {
        const projectId = (options.walletConnect && options.walletConnect?.projectId) || options.walletConnectProjectId;
        wallets.push((0, walletConnect_1.walletConnect)({
            projectId
        }));
    }
    return (0, getKitConnectWallets_1.getKitConnectWallets)(projectAccessKey, wallets);
};
exports.getDefaultUniversalConnectors = getDefaultUniversalConnectors;
//# sourceMappingURL=defaultConnectors.js.map