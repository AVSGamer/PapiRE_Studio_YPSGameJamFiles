"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWaasFeeOptions = useWaasFeeOptions;
const react_1 = require("react");
const wagmi_1 = require("wagmi");
const deferred_1 = require("../utils/deferred");
// null means it's native token
let _pendingFeeConfirmation;
function useWaasFeeOptions() {
    const connections = (0, wagmi_1.useConnections)();
    const waasConnector = connections.find(c => c.connector.id.includes('waas'))?.connector;
    const [pendingFeeOptionConfirmation, setPendingFeeOptionConfirmation] = (0, react_1.useState)();
    function confirmPendingFeeOption(id, feeTokenAddress) {
        _pendingFeeConfirmation?.resolve({ id, feeTokenAddress, confirmed: true });
        setPendingFeeOptionConfirmation(undefined);
        _pendingFeeConfirmation = undefined;
    }
    function rejectPendingFeeOption(id) {
        _pendingFeeConfirmation?.resolve({ id, feeTokenAddress: undefined, confirmed: false });
        setPendingFeeOptionConfirmation(undefined);
        _pendingFeeConfirmation = undefined;
    }
    (0, react_1.useEffect)(() => {
        async function setup() {
            if (!waasConnector) {
                return;
            }
            const waasProvider = waasConnector.sequenceWaasProvider;
            if (!waasProvider) {
                return;
            }
            waasProvider.feeConfirmationHandler = {
                confirmFeeOption(id, options, txs, chainId) {
                    const pending = new deferred_1.Deferred();
                    setPendingFeeOptionConfirmation({ id, options, chainId });
                    _pendingFeeConfirmation = pending;
                    return pending.promise;
                }
            };
        }
        setup();
    });
    return [pendingFeeOptionConfirmation, confirmPendingFeeOption, rejectPendingFeeOption];
}
//# sourceMappingURL=useWaasFeeOptions.js.map