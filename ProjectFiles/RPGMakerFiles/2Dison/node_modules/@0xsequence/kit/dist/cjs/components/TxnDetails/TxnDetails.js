"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxnDetails = exports.TxnDetailsSkeleton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const design_system_1 = require("@0xsequence/design-system");
const indexer_1 = require("@0xsequence/indexer");
const ethers_1 = require("ethers");
const react_1 = require("react");
const wagmi_1 = require("wagmi");
const data_1 = require("../../hooks/data");
const useAPIClient_1 = require("../../hooks/useAPIClient");
const helpers_1 = require("../../utils/helpers");
const tokens_1 = require("../../utils/tokens");
const txnDecoding_1 = require("../../utils/txnDecoding");
const CollectibleTileImage_1 = require("../CollectibleTileImage");
const TxnDetailsSkeleton = () => {
    return ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { alignItems: "center", justifyContent: "space-between", children: [(0, jsx_runtime_1.jsxs)(design_system_1.Box, { justifyContent: "center", alignItems: "center", gap: "2", children: [(0, jsx_runtime_1.jsx)(design_system_1.Skeleton, { style: { width: 30, height: 30 }, borderRadius: "circle" }), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", gap: "2", alignItems: "flex-start", children: [(0, jsx_runtime_1.jsx)(design_system_1.Skeleton, { style: { width: 100, height: 14 } }), (0, jsx_runtime_1.jsx)(design_system_1.Skeleton, { style: { width: 75, height: 14 } })] })] }), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", gap: "2", alignItems: "flex-end", children: [(0, jsx_runtime_1.jsx)(design_system_1.Skeleton, { style: { width: 100, height: 14 } }), (0, jsx_runtime_1.jsx)(design_system_1.Skeleton, { style: { width: 50, height: 12 } })] })] }));
};
exports.TxnDetailsSkeleton = TxnDetailsSkeleton;
const TxnDetails = ({ address, txs, chainId }) => {
    const apiClient = (0, useAPIClient_1.useAPIClient)();
    // const { fiatCurrency } = useSettings()
    const [decodingType, setDecodingType] = (0, react_1.useState)(undefined);
    const [transferProps, setTransferProps] = (0, react_1.useState)([]);
    const [awardItemProps, setAwardItemProps] = (0, react_1.useState)([]);
    const getTxnProps = async () => {
        const decodedTxnDatas = await (0, txnDecoding_1.decodeTransactions)(apiClient, address, txs);
        const type = decodedTxnDatas[0]?.type;
        setDecodingType(type);
        if (type === txnDecoding_1.DecodingType.TRANSFER) {
            setTransferProps(decodedTxnDatas);
        }
        if (type === txnDecoding_1.DecodingType.AWARD_ITEM) {
            setAwardItemProps(decodedTxnDatas);
        }
    };
    (0, react_1.useEffect)(() => {
        getTxnProps();
    }, []);
    if (!decodingType) {
        return (0, jsx_runtime_1.jsx)(exports.TxnDetailsSkeleton, {});
    }
    if (decodingType === txnDecoding_1.DecodingType.UNKNOWN) {
        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});
    }
    if (transferProps[0]) {
        return (0, jsx_runtime_1.jsx)(TransferItemInfo, { address: address, transferProps: transferProps[0], chainId: chainId });
    }
    if (awardItemProps[0]) {
        return (0, jsx_runtime_1.jsx)(AwardItemInfo, { awardItemProps: awardItemProps[0] });
    }
};
exports.TxnDetails = TxnDetails;
const TransferItemInfo = ({ address, transferProps, chainId }) => {
    const { chains } = (0, wagmi_1.useConfig)();
    const contractAddress = transferProps.contractAddress;
    const toAddress = transferProps.to;
    const isNativeCoin = contractAddress ? (0, helpers_1.compareAddress)(contractAddress, ethers_1.ethers.ZeroAddress) : true;
    const is1155 = transferProps.contractType === indexer_1.ContractType.ERC1155;
    const isNFT = transferProps.contractType === indexer_1.ContractType.ERC1155 || transferProps.contractType === indexer_1.ContractType.ERC721;
    const nativeTokenInfo = (0, tokens_1.getNativeTokenInfoByChainId)(chainId, chains);
    const { data: balances = [] } = (0, data_1.useBalances)({
        chainIds: [chainId],
        accountAddress: address,
        contractAddress
    });
    const { data: tokenMetadata } = (0, data_1.useTokenMetadata)(chainId, contractAddress, transferProps.tokenIds ?? []);
    const tokenBalance = contractAddress ? balances.find(b => (0, helpers_1.compareAddress)(b.contractAddress, contractAddress)) : undefined;
    const decimals = isNativeCoin ? nativeTokenInfo.decimals : tokenBalance?.contractInfo?.decimals || 18;
    const imageUrl = isNativeCoin
        ? nativeTokenInfo.logoURI
        : isNFT
            ? tokenMetadata?.[0]?.image
            : tokenBalance?.contractInfo?.logoURI;
    const name = isNativeCoin ? nativeTokenInfo.name : isNFT ? tokenMetadata?.[0]?.name : tokenBalance?.contractInfo?.name || '';
    const symbol = isNativeCoin ? nativeTokenInfo.symbol : isNFT ? '' : tokenBalance?.contractInfo?.symbol || '';
    const amountSending = transferProps.amounts[0] ?? transferProps.value;
    const showSquareImage = isNFT;
    return ((0, jsx_runtime_1.jsxs)(design_system_1.Card, { children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { marginBottom: "2", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "medium", color: "text100", children: (0, helpers_1.capitalize)(transferProps.type ?? '') }) }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { alignItems: "flex-end", justifyContent: "space-between", marginBottom: "2", children: (0, jsx_runtime_1.jsxs)(design_system_1.Box, { justifyContent: "space-between", alignItems: "center", gap: "2", children: [showSquareImage ? ((0, jsx_runtime_1.jsx)(design_system_1.Box, { style: { width: '40px' }, children: (0, jsx_runtime_1.jsx)(CollectibleTileImage_1.CollectibleTileImage, { imageUrl: imageUrl }) })) : ((0, jsx_runtime_1.jsx)(design_system_1.TokenImage, { src: imageUrl, symbol: symbol, size: "md" })), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", alignItems: "flex-start", children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { flexDirection: "row", alignItems: "center", gap: "1", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "medium", color: "text100", children: name }) }), (0, jsx_runtime_1.jsxs)(design_system_1.Text, { color: "text50", variant: "normal", children: [' ', `${ethers_1.ethers.formatUnits(amountSending, is1155 ? tokenMetadata?.[0]?.decimals : isNFT ? 0 : decimals)} ${symbol} `] })] })] }) }), toAddress !== undefined && ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { children: [(0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "normal", color: "text50", children: "To" }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { marginTop: "2", borderRadius: "md", background: "backgroundSecondary", width: "full", flexDirection: "row", justifyContent: "space-between", alignItems: "center", padding: "4", style: { height: '52px' }, children: (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "row", justifyContent: "center", alignItems: "center", gap: "2", children: [(0, jsx_runtime_1.jsx)(design_system_1.GradientAvatar, { address: toAddress, style: { width: '20px' } }), (0, jsx_runtime_1.jsx)(design_system_1.Text, { color: "text100", children: `0x${truncateAtMiddle(toAddress.substring(2), 12)}` })] }) })] }))] }));
};
// This is used only for demo purposes
const AwardItemInfo = ({ awardItemProps }) => {
    return ((0, jsx_runtime_1.jsxs)(design_system_1.Card, { children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { marginBottom: "2", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "medium", color: "text100", children: "Mint" }) }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { alignItems: "flex-end", justifyContent: "space-between", marginBottom: "2", children: (0, jsx_runtime_1.jsxs)(design_system_1.Box, { justifyContent: "space-between", alignItems: "center", gap: "2", children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { style: { width: '40px' }, children: (0, jsx_runtime_1.jsx)(CollectibleTileImage_1.CollectibleTileImage, { imageUrl: "https://dev-metadata.sequence.app/projects/277/collections/62/tokens/0/image.jpeg" }) }), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", alignItems: "flex-start", children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { flexDirection: "row", alignItems: "center", gap: "1", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "medium", color: "text100", children: "Waas Demo NFT" }) }), (0, jsx_runtime_1.jsx)(design_system_1.Text, { color: "text50", variant: "normal", children: awardItemProps.amount })] })] }) }), awardItemProps.to !== undefined && ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { children: [(0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "normal", color: "text50", children: "To" }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { marginTop: "2", borderRadius: "md", background: "backgroundSecondary", width: "full", flexDirection: "row", justifyContent: "space-between", alignItems: "center", padding: "4", style: { height: '52px' }, children: (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "row", justifyContent: "center", alignItems: "center", gap: "2", children: [(0, jsx_runtime_1.jsx)(design_system_1.GradientAvatar, { address: awardItemProps.to, style: { width: '20px' } }), (0, jsx_runtime_1.jsx)(design_system_1.Text, { color: "text100", children: `0x${truncateAtMiddle(awardItemProps.to.substring(2), 12)}` })] }) })] }))] }));
};
const truncateAtMiddle = (text, truncateAt) => {
    let finalText = text;
    if (text.length >= truncateAt) {
        finalText = text.slice(0, truncateAt / 2) + '...' + text.slice(text.length - truncateAt / 2, text.length);
    }
    return finalText;
};
//# sourceMappingURL=TxnDetails.js.map