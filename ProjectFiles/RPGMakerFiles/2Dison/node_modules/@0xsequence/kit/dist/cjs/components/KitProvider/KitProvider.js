"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.KitProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const _0xsequence_1 = require("0xsequence");
const design_system_1 = require("@0xsequence/design-system");
const network_1 = require("@0xsequence/network");
const google_1 = require("@react-oauth/google");
const ethers_1 = require("ethers");
const framer_motion_1 = require("framer-motion");
const react_1 = require("react");
const wagmi_1 = require("wagmi");
const constants_1 = require("../../constants");
const Analytics_1 = require("../../contexts/Analytics");
const ConnectModal_1 = require("../../contexts/ConnectModal");
const KitConfig_1 = require("../../contexts/KitConfig");
const Theme_1 = require("../../contexts/Theme");
const WalletSettings_1 = require("../../contexts/WalletSettings");
const useStorage_1 = require("../../hooks/useStorage");
const useWaasConfirmationHandler_1 = require("../../hooks/useWaasConfirmationHandler");
const useWaasEmailConflict_1 = require("../../hooks/useWaasEmailConflict");
const styling_1 = require("../../utils/styling");
const Connect_1 = require("../Connect");
const NetworkBadge_1 = require("../NetworkBadge");
const PageHeading_1 = require("../PageHeading");
const SequenceLogo_1 = require("../SequenceLogo");
const TxnDetails_1 = require("../TxnDetails");
const KitProvider = (props) => {
    const { config, children } = props;
    const { defaultTheme = 'dark', signIn = {}, position = 'center', displayedAssets: displayedAssetsSetting = [], ethAuth = {}, disableAnalytics = false } = config;
    const defaultAppName = signIn.projectName || 'app';
    const { expiry = constants_1.DEFAULT_SESSION_EXPIRATION, app = defaultAppName, origin, nonce } = ethAuth;
    const [openConnectModal, setOpenConnectModal] = (0, react_1.useState)(false);
    const [theme, setTheme] = (0, react_1.useState)(defaultTheme || 'dark');
    const [modalPosition, setModalPosition] = (0, react_1.useState)(position);
    const [displayedAssets, setDisplayedAssets] = (0, react_1.useState)(displayedAssetsSetting);
    const [analytics, setAnalytics] = (0, react_1.useState)();
    const { address, isConnected } = (0, wagmi_1.useAccount)();
    const wagmiConfig = (0, wagmi_1.useConfig)();
    const storage = (0, useStorage_1.useStorage)();
    const connections = (0, wagmi_1.useConnections)();
    const waasConnector = connections.find(c => c.connector.id.includes('waas'))?.connector;
    const [pendingRequestConfirmation, confirmPendingRequest, rejectPendingRequest] = (0, useWaasConfirmationHandler_1.useWaasConfirmationHandler)(waasConnector);
    const googleWaasConnector = wagmiConfig.connectors.find(c => c.id === 'sequence-waas' && c._wallet.id === 'google-waas');
    const googleClientId = googleWaasConnector?.params?.googleClientId || '';
    const setupAnalytics = (projectAccessKey) => {
        const s = _0xsequence_1.sequence.initWallet(projectAccessKey);
        const sequenceAnalytics = s.client.analytics;
        setAnalytics(sequenceAnalytics);
    };
    (0, react_1.useEffect)(() => {
        if (!isConnected) {
            analytics?.reset();
            return;
        }
        if (address) {
            analytics?.identify(address.toLowerCase());
        }
    }, [analytics, address, isConnected]);
    (0, react_1.useEffect)(() => {
        if (!disableAnalytics) {
            setupAnalytics(config.projectAccessKey);
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if (theme !== defaultTheme) {
            setTheme(defaultTheme);
        }
    }, [defaultTheme]);
    (0, react_1.useEffect)(() => {
        if (modalPosition !== position) {
            setModalPosition(position);
        }
    }, [position]);
    // Write data in local storage for retrieval in connectors
    (0, react_1.useEffect)(() => {
        // Theme
        // TODO: set the sequence theme once it is added to connect options
        if (typeof theme === 'object') {
            // localStorage.setItem(LocalStorageKey.Theme, JSON.stringify(theme))
        }
        else {
            localStorage.setItem(constants_1.LocalStorageKey.Theme, theme);
        }
        // EthAuth
        // note: keep an eye out for potential race-conditions, though they shouldn't occur.
        // If there are race conditions, the settings could be a function executed prior to being passed to wagmi
        storage?.setItem(constants_1.LocalStorageKey.EthAuthSettings, {
            expiry,
            app,
            origin: origin || location.origin,
            nonce
        });
    }, [theme, ethAuth]);
    (0, react_1.useEffect)(() => {
        setDisplayedAssets(displayedAssets);
    }, [displayedAssetsSetting]);
    const { isEmailConflictOpen, emailConflictInfo, toggleEmailConflictModal } = (0, useWaasEmailConflict_1.useEmailConflict)();
    return ((0, jsx_runtime_1.jsx)(KitConfig_1.KitConfigContextProvider, { value: config, children: (0, jsx_runtime_1.jsx)(Theme_1.ThemeContextProvider, { value: {
                theme,
                setTheme,
                position: modalPosition,
                setPosition: setModalPosition
            }, children: (0, jsx_runtime_1.jsx)(google_1.GoogleOAuthProvider, { clientId: googleClientId, children: (0, jsx_runtime_1.jsx)(ConnectModal_1.ConnectModalContextProvider, { value: { setOpenConnectModal, openConnectModalState: openConnectModal }, children: (0, jsx_runtime_1.jsx)(WalletSettings_1.WalletConfigContextProvider, { value: { setDisplayedAssets, displayedAssets }, children: (0, jsx_runtime_1.jsxs)(Analytics_1.AnalyticsContextProvider, { value: { setAnalytics, analytics }, children: [(0, jsx_runtime_1.jsx)("div", { id: "kit-provider", children: (0, jsx_runtime_1.jsx)(design_system_1.ThemeProvider, { root: "#kit-provider", scope: "kit", theme: theme, children: (0, jsx_runtime_1.jsxs)(framer_motion_1.AnimatePresence, { children: [openConnectModal && ((0, jsx_runtime_1.jsx)(design_system_1.Modal, { scroll: false, backdropColor: "backgroundBackdrop", size: "sm", contentProps: {
                                                        style: {
                                                            maxWidth: '364px',
                                                            overflow: 'visible',
                                                            ...(0, styling_1.getModalPositionCss)(position)
                                                        }
                                                    }, onClose: () => setOpenConnectModal(false), children: (0, jsx_runtime_1.jsx)(Connect_1.ConnectWalletContent, { onClose: () => setOpenConnectModal(false), emailConflictInfo: emailConflictInfo, ...props }) })), pendingRequestConfirmation && ((0, jsx_runtime_1.jsx)(design_system_1.Modal, { scroll: false, backdropColor: "backgroundBackdrop", size: "sm", contentProps: {
                                                        style: {
                                                            maxWidth: '364px',
                                                            ...(0, styling_1.getModalPositionCss)(position)
                                                        }
                                                    }, isDismissible: false, onClose: () => {
                                                        rejectPendingRequest('');
                                                    }, children: (0, jsx_runtime_1.jsxs)(design_system_1.Box, { paddingX: "4", paddingTop: "4", paddingBottom: "2", children: [(0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", justifyContent: "center", color: "text100", alignItems: "center", fontWeight: "medium", style: {
                                                                    marginTop: '4px'
                                                                }, children: [(0, jsx_runtime_1.jsx)(design_system_1.ModalPrimitive.Title, { asChild: true, children: (0, jsx_runtime_1.jsxs)(design_system_1.Text, { as: "h1", variant: "large", marginBottom: "5", children: ["Confirm ", pendingRequestConfirmation.type === 'signMessage' ? 'signing message' : 'transaction'] }) }), pendingRequestConfirmation.type === 'signMessage' && ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", width: "full", children: [(0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "normal", color: "text50", fontWeight: "medium", children: "Message" }), (0, jsx_runtime_1.jsx)(design_system_1.Card, { marginTop: "2", paddingY: "6", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "normal", marginBottom: "4", children: ethers_1.ethers.toUtf8String(pendingRequestConfirmation.message ?? '') }) })] })), pendingRequestConfirmation.type === 'signTransaction' && ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "column", width: "full", children: [(0, jsx_runtime_1.jsx)(TxnDetails_1.TxnDetails, { address: address ?? '', txs: pendingRequestConfirmation.txs ?? [], chainId: pendingRequestConfirmation.chainId ?? network_1.ChainId.POLYGON }), (0, jsx_runtime_1.jsx)(design_system_1.Collapsible, { label: "Transaction data", marginTop: "4", children: (0, jsx_runtime_1.jsx)(design_system_1.Card, { overflowX: "scroll", marginY: "3", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "code", marginBottom: "4", children: JSON.stringify(pendingRequestConfirmation.txs, null, 2) }) }) })] })), pendingRequestConfirmation.chainId && ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { width: "full", marginTop: "3", justifyContent: "flex-end", alignItems: "center", children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { width: "1/2", justifyContent: "flex-start", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "small", color: "text50", children: "Network" }) }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { width: "1/2", justifyContent: "flex-end", children: (0, jsx_runtime_1.jsx)(NetworkBadge_1.NetworkBadge, { chainId: pendingRequestConfirmation.chainId }) })] })), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { flexDirection: "row", gap: "2", width: "full", marginTop: "5", children: [(0, jsx_runtime_1.jsx)(design_system_1.Button, { width: "full", shape: "square", size: "lg", label: "Reject", onClick: () => {
                                                                                    rejectPendingRequest(pendingRequestConfirmation?.id);
                                                                                } }), (0, jsx_runtime_1.jsx)(design_system_1.Button, { alignItems: "center", textAlign: "center", width: "full", shape: "square", size: "lg", label: "Confirm", variant: "primary", onClick: () => {
                                                                                    confirmPendingRequest(pendingRequestConfirmation?.id);
                                                                                } })] })] }), (0, jsx_runtime_1.jsx)(SequenceLogo_1.PoweredBySequence, {})] }) })), isEmailConflictOpen && emailConflictInfo && ((0, jsx_runtime_1.jsx)(design_system_1.Modal, { size: "sm", scroll: false, onClose: () => toggleEmailConflictModal(false), children: (0, jsx_runtime_1.jsxs)(design_system_1.Box, { padding: "4", children: [(0, jsx_runtime_1.jsx)(design_system_1.ModalPrimitive.Title, { asChild: true, children: (0, jsx_runtime_1.jsx)(PageHeading_1.PageHeading, { children: "Email already in use" }) }), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { children: [(0, jsx_runtime_1.jsxs)(design_system_1.Text, { variant: "normal", color: "text80", textAlign: "center", children: ["Another account with this email address ", (0, jsx_runtime_1.jsxs)(design_system_1.Text, { color: "text100", children: ["(", emailConflictInfo.email, ")"] }), ' ', "already exists with account type ", (0, jsx_runtime_1.jsxs)(design_system_1.Text, { color: "text100", children: ["(", emailConflictInfo.type, ")"] }), ". Please sign in again with the correct account."] }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { marginTop: "4", gap: "2", alignItems: "center", justifyContent: "center", children: (0, jsx_runtime_1.jsx)(design_system_1.Button, { label: "OK", onClick: () => toggleEmailConflictModal(false) }) })] })] }) }))] }) }) }), children] }) }) }) }) }) }));
};
exports.KitProvider = KitProvider;
//# sourceMappingURL=KitProvider.js.map