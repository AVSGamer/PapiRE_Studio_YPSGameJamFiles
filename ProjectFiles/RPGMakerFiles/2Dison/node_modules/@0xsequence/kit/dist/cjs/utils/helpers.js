"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalize = exports.formatDisplay = exports.compareAddress = exports.isEmailValid = void 0;
const isEmailValid = (email) => {
    return /^\S+@\S+\.\S{2,}$/.test(email);
};
exports.isEmailValid = isEmailValid;
const compareAddress = (a, b) => {
    return a.toLowerCase() === b.toLowerCase();
};
exports.compareAddress = compareAddress;
var ValueType;
(function (ValueType) {
    ValueType[ValueType["VERY_LARGE"] = 0] = "VERY_LARGE";
    ValueType[ValueType["FRACTION"] = 1] = "FRACTION";
    ValueType[ValueType["VERY_TINY"] = 2] = "VERY_TINY";
    ValueType[ValueType["MIXED"] = 3] = "MIXED";
})(ValueType || (ValueType = {}));
const formatDisplay = (_val) => {
    if (isNaN(Number(_val))) {
        console.error(`display format error ${_val} is not a number`);
        return 'NaN';
    }
    const val = Number(_val);
    if (val === 0) {
        return '0';
    }
    let valMode;
    if (val > 100000000) {
        valMode = ValueType.VERY_LARGE;
    }
    else if (val < 0.0000000001) {
        valMode = ValueType.VERY_TINY;
    }
    else if (val < 1) {
        valMode = ValueType.FRACTION;
    }
    else {
        valMode = ValueType.MIXED;
    }
    let notation = undefined;
    let config;
    switch (valMode) {
        case ValueType.VERY_LARGE:
            notation = 'compact';
            config = {
                maximumFractionDigits: 4
            };
            break;
        case ValueType.VERY_TINY:
            notation = 'scientific';
            config = {
                maximumFractionDigits: 4
            };
            break;
        case ValueType.FRACTION:
            notation = 'standard';
            config = {
                maximumSignificantDigits: 4
            };
            break;
        default:
            notation = 'standard';
            config = {
                maximumFractionDigits: 2
            };
    }
    return Intl.NumberFormat('en-US', {
        notation,
        ...config
    }).format(val);
};
exports.formatDisplay = formatDisplay;
const capitalize = (word) => {
    return word.charAt(0).toUpperCase() + word.slice(1);
};
exports.capitalize = capitalize;
//# sourceMappingURL=helpers.js.map