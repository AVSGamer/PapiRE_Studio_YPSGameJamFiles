"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIndexerClients = exports.useIndexerClient = void 0;
const indexer_1 = require("@0xsequence/indexer");
const network_1 = require("@0xsequence/network");
const react_1 = require("react");
const KitConfig_1 = require("../contexts/KitConfig");
const useProjectAccessKey_1 = require("./useProjectAccessKey");
const useIndexerClient = (chainId) => {
    const projectAccessKey = (0, useProjectAccessKey_1.useProjectAccessKey)();
    const { isDev = false } = (0, KitConfig_1.useKitConfig)();
    const indexerClients = (0, react_1.useMemo)(() => {
        return new Map();
    }, [projectAccessKey, isDev]);
    const network = network_1.networks[chainId];
    const clientUrl = isDev ? `https://dev-${network.name}-indexer.sequence.app` : `https://${network.name}-indexer.sequence.app`;
    if (!indexerClients.has(chainId)) {
        indexerClients.set(chainId, new indexer_1.SequenceIndexer(clientUrl, projectAccessKey));
    }
    const indexerClient = indexerClients.get(chainId);
    if (!indexerClient) {
        throw new Error(`Indexer client not found for chainId: ${chainId}, did you forget to add this Chain?`);
    }
    return indexerClient;
};
exports.useIndexerClient = useIndexerClient;
const useIndexerClients = (chainIds) => {
    const projectAccessKey = (0, useProjectAccessKey_1.useProjectAccessKey)();
    const { isDev = false } = (0, KitConfig_1.useKitConfig)();
    const indexerClients = (0, react_1.useMemo)(() => {
        return new Map();
    }, [projectAccessKey, isDev]);
    const result = new Map();
    for (const chainId of chainIds) {
        const network = network_1.networks[chainId];
        const clientUrl = isDev ? `https://dev-${network.name}-indexer.sequence.app` : `https://${network.name}-indexer.sequence.app`;
        if (!indexerClients.has(chainId)) {
            indexerClients.set(chainId, new indexer_1.SequenceIndexer(clientUrl, projectAccessKey));
        }
        const indexerClient = indexerClients.get(chainId);
        if (!indexerClient) {
            throw new Error(`Indexer client not found for chainId: ${chainId}, did you forget to add this Chain?`);
        }
        result.set(chainId, indexerClient);
    }
    return result;
};
exports.useIndexerClients = useIndexerClients;
//# sourceMappingURL=useIndexerClient.js.map