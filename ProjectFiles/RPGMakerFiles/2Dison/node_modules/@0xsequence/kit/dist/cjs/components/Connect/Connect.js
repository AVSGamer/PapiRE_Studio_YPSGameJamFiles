"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connect = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const design_system_1 = require("@0xsequence/design-system");
const react_1 = require("react");
const react_apple_signin_auth_1 = require("react-apple-signin-auth");
const wagmi_1 = require("wagmi");
const constants_1 = require("../../constants");
const useStorage_1 = require("../../hooks/useStorage");
const useWaasEmailAuth_1 = require("../../hooks/useWaasEmailAuth");
const helpers_1 = require("../../utils/helpers");
const ConnectButton_1 = require("../ConnectButton");
const SequenceLogo_1 = require("../SequenceLogo");
const Banner_1 = require("./Banner");
const EmailWaasVerify_1 = require("./EmailWaasVerify");
const ExtendedWalletList_1 = require("./ExtendedWalletList");
const Connect = (props) => {
    (0, react_apple_signin_auth_1.useScript)(react_apple_signin_auth_1.appleAuthHelpers.APPLE_SCRIPT_SRC);
    const { onClose, emailConflictInfo, config = {} } = props;
    const { signIn = {} } = config;
    const { isConnected } = (0, wagmi_1.useAccount)();
    const storage = (0, useStorage_1.useStorage)();
    const [email, setEmail] = (0, react_1.useState)('');
    const [showEmailInput, setShowEmailInput] = (0, react_1.useState)(false);
    const [showEmailWaasPinInput, setShowEmailWaasPinInput] = (0, react_1.useState)(false);
    const [showExtendedList, setShowExtendedList] = (0, react_1.useState)(false);
    const { connectors, connect } = (0, wagmi_1.useConnect)();
    const hasInjectedSequenceConnector = connectors.some(c => c.id === 'app.sequence');
    const baseWalletConnectors = connectors
        .filter(c => {
        return c._wallet && (c._wallet.type === 'wallet' || c._wallet.type === undefined);
    })
        // Remove sequence if wallet extension detected
        .filter(c => {
        if (c._wallet?.id === 'sequence' && hasInjectedSequenceConnector) {
            return false;
        }
        return true;
    });
    const mockConnector = baseWalletConnectors.find(connector => {
        return connector._wallet.id === 'mock';
    });
    // EIP-6963 connectors will not have the _wallet property
    const injectedConnectors = connectors
        .filter(c => c.type === 'injected')
        // Remove the injected connectors when another connector is already in the base connectors
        .filter(connector => {
        if (connector.id === 'com.coinbase.wallet') {
            return !connectors.find(connector => connector?._wallet?.id === 'coinbase-wallet');
        }
        return true;
    })
        .map(connector => {
        const Logo = (props) => {
            return (0, jsx_runtime_1.jsx)(design_system_1.Image, { src: connector.icon, alt: connector.name, disableAnimation: true, ...props });
        };
        return {
            ...connector,
            _wallet: {
                id: connector.id,
                name: connector.name,
                logoLight: Logo,
                logoDark: Logo,
                type: 'wallet'
            }
        };
    });
    const socialAuthConnectors = connectors.filter(c => c._wallet?.type === 'social');
    const walletConnectors = [...baseWalletConnectors, ...injectedConnectors];
    const emailConnector = socialAuthConnectors.find(c => c._wallet.id.includes('email'));
    const isEmailOnly = emailConnector && socialAuthConnectors.length === 1;
    const displayExtendedListButton = walletConnectors.length > 7;
    const onChangeEmail = ev => {
        setEmail(ev.target.value);
    };
    // Close after successful connection
    (0, react_1.useEffect)(() => {
        if (isConnected) {
            onClose();
        }
    }, [isConnected]);
    const onConnect = (connector) => {
        if (signIn.useMock && mockConnector) {
            connect({ connector: mockConnector });
            return;
        }
        if (connector._wallet.id === 'email') {
            const email = prompt('Auto-email login, please specify the email address:');
            if ('setEmail' in connector) {
                ;
                connector.setEmail(email);
            }
        }
        connect({ connector });
    };
    const onConnectInlineEmail = async (e) => {
        e.preventDefault();
        if (signIn.useMock && mockConnector) {
            connect({ connector: mockConnector });
            return;
        }
        if (emailConnector) {
            if ('setEmail' in emailConnector) {
                ;
                emailConnector.setEmail(email);
            }
            if (emailConnector._wallet.id === 'email-waas') {
                try {
                    await initiateEmailAuth(email);
                    setShowEmailWaasPinInput(true);
                }
                catch (e) {
                    console.log(e);
                }
            }
            else {
                connect({ connector: emailConnector });
            }
        }
    };
    const { inProgress: emailAuthInProgress, loading: emailAuthLoading, error: emailAuthError, initiateAuth: initiateEmailAuth, sendChallengeAnswer } = (0, useWaasEmailAuth_1.useEmailAuth)({
        connector: emailConnector,
        onSuccess: async (result) => {
            if ('signInResponse' in result && result.signInResponse?.email) {
                storage?.setItem(constants_1.LocalStorageKey.WaasSignInEmail, result.signInResponse.email);
            }
            if (emailConnector) {
                if (result.version === 1) {
                    // Store the version 1 idToken so that it can be used to authenticate during a refresh
                    storage?.setItem(constants_1.LocalStorageKey.WaasEmailIdToken, result.idToken);
                }
                connect({ connector: emailConnector });
            }
        }
    });
    // Hide the email input if there is an email conflict
    (0, react_1.useEffect)(() => {
        if (emailConflictInfo) {
            setShowEmailWaasPinInput(false);
        }
    }, [emailConflictInfo]);
    if (showEmailWaasPinInput) {
        return (0, jsx_runtime_1.jsx)(EmailWaasVerify_1.EmailWaasVerify, { error: emailAuthError, isLoading: emailAuthLoading, onConfirm: sendChallengeAnswer });
    }
    if (showExtendedList) {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { position: "absolute", top: "4", children: (0, jsx_runtime_1.jsx)(design_system_1.IconButton, { icon: design_system_1.ChevronLeftIcon, onClick: () => setShowExtendedList(false), size: "xs" }) }), (0, jsx_runtime_1.jsx)(ExtendedWalletList_1.ExtendedWalletList, { connectors: walletConnectors, onConnect: onConnect })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Banner_1.Banner, { config: config }), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { marginTop: "6", children: [emailConnector && (showEmailInput || isEmailOnly) ? ((0, jsx_runtime_1.jsxs)("form", { onSubmit: onConnectInlineEmail, children: [(0, jsx_runtime_1.jsx)(design_system_1.TextInput, { onChange: onChangeEmail, value: email, name: "email", placeholder: "Enter email", "data-1p-ignore": true }), (0, jsx_runtime_1.jsxs)(design_system_1.Box, { alignItems: "center", justifyContent: "center", marginTop: "4", children: [!emailAuthInProgress && ((0, jsx_runtime_1.jsxs)(design_system_1.Box, { gap: "2", width: "full", children: [!isEmailOnly && (0, jsx_runtime_1.jsx)(design_system_1.Button, { label: "Back", width: "full", onClick: () => setShowEmailInput(false) }), (0, jsx_runtime_1.jsx)(design_system_1.Button, { type: "submit", variant: "primary", disabled: !(0, helpers_1.isEmailValid)(email), width: "full", label: "Continue", rightIcon: design_system_1.ChevronRightIcon })] })), emailAuthInProgress && (0, jsx_runtime_1.jsx)(design_system_1.Spinner, {})] })] })) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: socialAuthConnectors.length > 0 && ((0, jsx_runtime_1.jsx)(design_system_1.Box, { marginTop: "2", gap: "2", flexDirection: "row", justifyContent: "center", alignItems: "center", flexWrap: "wrap", children: socialAuthConnectors.map(connector => {
                                return ((0, jsx_runtime_1.jsx)(design_system_1.Box, { aspectRatio: "1/1", alignItems: "center", justifyContent: "center", children: connector._wallet.id === 'google-waas' ? ((0, jsx_runtime_1.jsx)(ConnectButton_1.GoogleWaasConnectButton, { connector: connector, onConnect: onConnect })) : connector._wallet.id === 'apple-waas' ? ((0, jsx_runtime_1.jsx)(ConnectButton_1.AppleWaasConnectButton, { connector: connector, onConnect: onConnect })) : connector._wallet.id.includes('email') ? ((0, jsx_runtime_1.jsx)(ConnectButton_1.EmailConnectButton, { onClick: () => setShowEmailInput(true) })) : ((0, jsx_runtime_1.jsx)(ConnectButton_1.ConnectButton, { connector: connector, onConnect: onConnect })) }, connector.uid));
                            }) })) })), walletConnectors.length > 0 && !showEmailInput && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [socialAuthConnectors.length > 0 && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(design_system_1.Divider, { color: "backgroundSecondary" }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { justifyContent: "center", alignItems: "center", children: (0, jsx_runtime_1.jsx)(design_system_1.Text, { variant: "small", color: "text50", children: "or select a wallet" }) })] })), (0, jsx_runtime_1.jsx)(design_system_1.Box, { marginTop: "2", gap: "2", flexDirection: "row", justifyContent: "center", alignItems: "center", children: walletConnectors.slice(0, 7).map(connector => {
                                    return (0, jsx_runtime_1.jsx)(ConnectButton_1.ConnectButton, { connector: connector, onConnect: onConnect }, connector.uid);
                                }) }), displayExtendedListButton && ((0, jsx_runtime_1.jsx)(design_system_1.Box, { marginTop: "4", justifyContent: "center", children: (0, jsx_runtime_1.jsx)(design_system_1.Button, { shape: "square", size: "xs", onClick: () => setShowExtendedList(true), label: "More options", rightIcon: design_system_1.ChevronRightIcon }) }))] }))] }), (0, jsx_runtime_1.jsx)(SequenceLogo_1.PoweredBySequence, {})] }));
};
exports.Connect = Connect;
//# sourceMappingURL=Connect.js.map