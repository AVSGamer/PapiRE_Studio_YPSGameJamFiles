"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailConnectButton = exports.AppleWaasConnectButton = exports.GoogleWaasConnectButton = exports.ConnectButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const design_system_1 = require("@0xsequence/design-system");
const google_1 = require("@react-oauth/google");
const react_1 = require("react");
const react_apple_signin_auth_1 = require("react-apple-signin-auth");
const constants_1 = require("../../constants");
const useStorage_1 = require("../../hooks/useStorage");
const BUTTON_SIZE = '14';
const ICON_SIZE = '10';
const getLogo = (theme, walletProps) => theme === 'dark'
    ? walletProps.logoDark || walletProps.monochromeLogoDark
    : walletProps.logoLight || walletProps.monochromeLogoLight;
const ConnectButton = (props) => {
    const { connector, label, onConnect } = props;
    const { theme } = (0, design_system_1.useTheme)();
    const walletProps = connector._wallet;
    const Logo = getLogo(theme, walletProps);
    return ((0, jsx_runtime_1.jsx)(design_system_1.Tooltip, { message: label || walletProps.name, children: (0, jsx_runtime_1.jsx)(design_system_1.Card, { clickable: true, width: BUTTON_SIZE, height: BUTTON_SIZE, padding: "2", borderRadius: "xs", justifyContent: "center", alignItems: "center", onClick: () => onConnect(connector), children: (0, jsx_runtime_1.jsx)(design_system_1.Box, { as: Logo, width: ICON_SIZE, height: ICON_SIZE }) }) }));
};
exports.ConnectButton = ConnectButton;
const GoogleWaasConnectButton = (props) => {
    const { connector, onConnect } = props;
    const storage = (0, useStorage_1.useStorage)();
    const [enableGoogleTooltip, setEnableGoogleTooltip] = (0, react_1.useState)(false);
    const { theme } = (0, design_system_1.useTheme)();
    const walletProps = connector._wallet;
    const Logo = getLogo(theme, walletProps);
    (0, react_1.useEffect)(() => {
        setTimeout(() => {
            setEnableGoogleTooltip(true);
        }, 300);
    });
    return ((0, jsx_runtime_1.jsx)(design_system_1.Tooltip, { message: "Google", disabled: !enableGoogleTooltip, children: (0, jsx_runtime_1.jsxs)(design_system_1.Card, { clickable: true, background: "transparent", borderRadius: "xs", padding: "0", width: BUTTON_SIZE, height: BUTTON_SIZE, position: "relative", children: [(0, jsx_runtime_1.jsx)(design_system_1.Box, { width: "full", height: "full", overflow: "hidden", borderRadius: "sm", alignItems: "center", justifyContent: "center", style: { opacity: 0.0000001, transform: 'scale(1.4)' }, children: (0, jsx_runtime_1.jsx)(google_1.GoogleLogin, { type: "icon", size: "large", width: "56", onSuccess: credentialResponse => {
                            if (credentialResponse.credential) {
                                storage?.setItem(constants_1.LocalStorageKey.WaasGoogleIdToken, credentialResponse.credential);
                                onConnect(connector);
                            }
                        }, onError: () => {
                            console.log('Login Failed');
                        } }) }), (0, jsx_runtime_1.jsx)(design_system_1.Box, { background: "backgroundSecondary", borderRadius: "xs", display: "flex", justifyContent: "center", alignItems: "center", position: "absolute", pointerEvents: "none", width: "full", height: "full", top: "0", right: "0", children: (0, jsx_runtime_1.jsx)(design_system_1.Box, { as: Logo, width: ICON_SIZE, height: ICON_SIZE }) })] }) }));
};
exports.GoogleWaasConnectButton = GoogleWaasConnectButton;
const AppleWaasConnectButton = (props) => {
    const { connector, onConnect } = props;
    const storage = (0, useStorage_1.useStorage)();
    const { data: appleClientId } = (0, useStorage_1.useStorageItem)(constants_1.LocalStorageKey.WaasAppleClientID);
    const { data: appleRedirectUri } = (0, useStorage_1.useStorageItem)(constants_1.LocalStorageKey.WaasAppleRedirectURI);
    return appleClientId && appleRedirectUri ? ((0, jsx_runtime_1.jsx)(exports.ConnectButton, { connector: connector, onConnect: () => {
            react_apple_signin_auth_1.appleAuthHelpers.signIn({
                authOptions: {
                    clientId: appleClientId,
                    redirectURI: appleRedirectUri,
                    scope: 'openid email',
                    usePopup: true
                },
                onSuccess: (response) => {
                    if (response.authorization?.id_token) {
                        storage?.setItem(constants_1.LocalStorageKey.WaasAppleIdToken, response.authorization.id_token);
                        onConnect(connector);
                    }
                    else {
                        console.log('Apple login error: No id_token found');
                    }
                },
                onError: (error) => console.error(error)
            });
        } })) : null;
};
exports.AppleWaasConnectButton = AppleWaasConnectButton;
const EmailConnectButton = (props) => {
    const { onClick } = props;
    return ((0, jsx_runtime_1.jsx)(design_system_1.Tooltip, { message: 'Email', children: (0, jsx_runtime_1.jsx)(design_system_1.Card, { clickable: true, width: BUTTON_SIZE, height: BUTTON_SIZE, padding: "2", borderRadius: "xs", justifyContent: "center", alignItems: "center", onClick: onClick, children: (0, jsx_runtime_1.jsx)(design_system_1.EmailIcon, { size: "xl", color: "text100" }) }) }));
};
exports.EmailConnectButton = EmailConnectButton;
//# sourceMappingURL=ConnectButton.js.map