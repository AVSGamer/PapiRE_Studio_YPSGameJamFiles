import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, Card, EmailIcon, Tooltip, useTheme } from '@0xsequence/design-system';
import { GoogleLogin } from '@react-oauth/google';
import { useEffect, useState } from 'react';
import { appleAuthHelpers } from 'react-apple-signin-auth';
import { LocalStorageKey } from '../../constants';
import { useStorage, useStorageItem } from '../../hooks/useStorage';
const BUTTON_SIZE = '14';
const ICON_SIZE = '10';
const getLogo = (theme, walletProps) => theme === 'dark'
    ? walletProps.logoDark || walletProps.monochromeLogoDark
    : walletProps.logoLight || walletProps.monochromeLogoLight;
export const ConnectButton = (props) => {
    const { connector, label, onConnect } = props;
    const { theme } = useTheme();
    const walletProps = connector._wallet;
    const Logo = getLogo(theme, walletProps);
    return (_jsx(Tooltip, { message: label || walletProps.name, children: _jsx(Card, { clickable: true, width: BUTTON_SIZE, height: BUTTON_SIZE, padding: "2", borderRadius: "xs", justifyContent: "center", alignItems: "center", onClick: () => onConnect(connector), children: _jsx(Box, { as: Logo, width: ICON_SIZE, height: ICON_SIZE }) }) }));
};
export const GoogleWaasConnectButton = (props) => {
    const { connector, onConnect } = props;
    const storage = useStorage();
    const [enableGoogleTooltip, setEnableGoogleTooltip] = useState(false);
    const { theme } = useTheme();
    const walletProps = connector._wallet;
    const Logo = getLogo(theme, walletProps);
    useEffect(() => {
        setTimeout(() => {
            setEnableGoogleTooltip(true);
        }, 300);
    });
    return (_jsx(Tooltip, { message: "Google", disabled: !enableGoogleTooltip, children: _jsxs(Card, { clickable: true, background: "transparent", borderRadius: "xs", padding: "0", width: BUTTON_SIZE, height: BUTTON_SIZE, position: "relative", children: [_jsx(Box, { width: "full", height: "full", overflow: "hidden", borderRadius: "sm", alignItems: "center", justifyContent: "center", style: { opacity: 0.0000001, transform: 'scale(1.4)' }, children: _jsx(GoogleLogin, { type: "icon", size: "large", width: "56", onSuccess: credentialResponse => {
                            if (credentialResponse.credential) {
                                storage?.setItem(LocalStorageKey.WaasGoogleIdToken, credentialResponse.credential);
                                onConnect(connector);
                            }
                        }, onError: () => {
                            console.log('Login Failed');
                        } }) }), _jsx(Box, { background: "backgroundSecondary", borderRadius: "xs", display: "flex", justifyContent: "center", alignItems: "center", position: "absolute", pointerEvents: "none", width: "full", height: "full", top: "0", right: "0", children: _jsx(Box, { as: Logo, width: ICON_SIZE, height: ICON_SIZE }) })] }) }));
};
export const AppleWaasConnectButton = (props) => {
    const { connector, onConnect } = props;
    const storage = useStorage();
    const { data: appleClientId } = useStorageItem(LocalStorageKey.WaasAppleClientID);
    const { data: appleRedirectUri } = useStorageItem(LocalStorageKey.WaasAppleRedirectURI);
    return appleClientId && appleRedirectUri ? (_jsx(ConnectButton, { connector: connector, onConnect: () => {
            appleAuthHelpers.signIn({
                authOptions: {
                    clientId: appleClientId,
                    redirectURI: appleRedirectUri,
                    scope: 'openid email',
                    usePopup: true
                },
                onSuccess: (response) => {
                    if (response.authorization?.id_token) {
                        storage?.setItem(LocalStorageKey.WaasAppleIdToken, response.authorization.id_token);
                        onConnect(connector);
                    }
                    else {
                        console.log('Apple login error: No id_token found');
                    }
                },
                onError: (error) => console.error(error)
            });
        } })) : null;
};
export const EmailConnectButton = (props) => {
    const { onClick } = props;
    return (_jsx(Tooltip, { message: 'Email', children: _jsx(Card, { clickable: true, width: BUTTON_SIZE, height: BUTTON_SIZE, padding: "2", borderRadius: "xs", justifyContent: "center", alignItems: "center", onClick: onClick, children: _jsx(EmailIcon, { size: "xl", color: "text100" }) }) }));
};
//# sourceMappingURL=ConnectButton.js.map