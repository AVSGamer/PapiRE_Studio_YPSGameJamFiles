import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, Button, ChevronLeftIcon, ChevronRightIcon, Divider, Text, TextInput, Spinner, Image, IconButton } from '@0xsequence/design-system';
import { useState, useEffect } from 'react';
import { appleAuthHelpers, useScript } from 'react-apple-signin-auth';
import { useConnect, useAccount } from 'wagmi';
import { LocalStorageKey } from '../../constants';
import { useStorage } from '../../hooks/useStorage';
import { useEmailAuth } from '../../hooks/useWaasEmailAuth';
import { isEmailValid } from '../../utils/helpers';
import { AppleWaasConnectButton, ConnectButton, EmailConnectButton, GoogleWaasConnectButton } from '../ConnectButton';
import { PoweredBySequence } from '../SequenceLogo';
import { Banner } from './Banner';
import { EmailWaasVerify } from './EmailWaasVerify';
import { ExtendedWalletList } from './ExtendedWalletList';
export const Connect = (props) => {
    useScript(appleAuthHelpers.APPLE_SCRIPT_SRC);
    const { onClose, emailConflictInfo, config = {} } = props;
    const { signIn = {} } = config;
    const { isConnected } = useAccount();
    const storage = useStorage();
    const [email, setEmail] = useState('');
    const [showEmailInput, setShowEmailInput] = useState(false);
    const [showEmailWaasPinInput, setShowEmailWaasPinInput] = useState(false);
    const [showExtendedList, setShowExtendedList] = useState(false);
    const { connectors, connect } = useConnect();
    const hasInjectedSequenceConnector = connectors.some(c => c.id === 'app.sequence');
    const baseWalletConnectors = connectors
        .filter(c => {
        return c._wallet && (c._wallet.type === 'wallet' || c._wallet.type === undefined);
    })
        // Remove sequence if wallet extension detected
        .filter(c => {
        if (c._wallet?.id === 'sequence' && hasInjectedSequenceConnector) {
            return false;
        }
        return true;
    });
    const mockConnector = baseWalletConnectors.find(connector => {
        return connector._wallet.id === 'mock';
    });
    // EIP-6963 connectors will not have the _wallet property
    const injectedConnectors = connectors
        .filter(c => c.type === 'injected')
        // Remove the injected connectors when another connector is already in the base connectors
        .filter(connector => {
        if (connector.id === 'com.coinbase.wallet') {
            return !connectors.find(connector => connector?._wallet?.id === 'coinbase-wallet');
        }
        return true;
    })
        .map(connector => {
        const Logo = (props) => {
            return _jsx(Image, { src: connector.icon, alt: connector.name, disableAnimation: true, ...props });
        };
        return {
            ...connector,
            _wallet: {
                id: connector.id,
                name: connector.name,
                logoLight: Logo,
                logoDark: Logo,
                type: 'wallet'
            }
        };
    });
    const socialAuthConnectors = connectors.filter(c => c._wallet?.type === 'social');
    const walletConnectors = [...baseWalletConnectors, ...injectedConnectors];
    const emailConnector = socialAuthConnectors.find(c => c._wallet.id.includes('email'));
    const isEmailOnly = emailConnector && socialAuthConnectors.length === 1;
    const displayExtendedListButton = walletConnectors.length > 7;
    const onChangeEmail = ev => {
        setEmail(ev.target.value);
    };
    // Close after successful connection
    useEffect(() => {
        if (isConnected) {
            onClose();
        }
    }, [isConnected]);
    const onConnect = (connector) => {
        if (signIn.useMock && mockConnector) {
            connect({ connector: mockConnector });
            return;
        }
        if (connector._wallet.id === 'email') {
            const email = prompt('Auto-email login, please specify the email address:');
            if ('setEmail' in connector) {
                ;
                connector.setEmail(email);
            }
        }
        connect({ connector });
    };
    const onConnectInlineEmail = async (e) => {
        e.preventDefault();
        if (signIn.useMock && mockConnector) {
            connect({ connector: mockConnector });
            return;
        }
        if (emailConnector) {
            if ('setEmail' in emailConnector) {
                ;
                emailConnector.setEmail(email);
            }
            if (emailConnector._wallet.id === 'email-waas') {
                try {
                    await initiateEmailAuth(email);
                    setShowEmailWaasPinInput(true);
                }
                catch (e) {
                    console.log(e);
                }
            }
            else {
                connect({ connector: emailConnector });
            }
        }
    };
    const { inProgress: emailAuthInProgress, loading: emailAuthLoading, error: emailAuthError, initiateAuth: initiateEmailAuth, sendChallengeAnswer } = useEmailAuth({
        connector: emailConnector,
        onSuccess: async (result) => {
            if ('signInResponse' in result && result.signInResponse?.email) {
                storage?.setItem(LocalStorageKey.WaasSignInEmail, result.signInResponse.email);
            }
            if (emailConnector) {
                if (result.version === 1) {
                    // Store the version 1 idToken so that it can be used to authenticate during a refresh
                    storage?.setItem(LocalStorageKey.WaasEmailIdToken, result.idToken);
                }
                connect({ connector: emailConnector });
            }
        }
    });
    // Hide the email input if there is an email conflict
    useEffect(() => {
        if (emailConflictInfo) {
            setShowEmailWaasPinInput(false);
        }
    }, [emailConflictInfo]);
    if (showEmailWaasPinInput) {
        return _jsx(EmailWaasVerify, { error: emailAuthError, isLoading: emailAuthLoading, onConfirm: sendChallengeAnswer });
    }
    if (showExtendedList) {
        return (_jsxs(_Fragment, { children: [_jsx(Box, { position: "absolute", top: "4", children: _jsx(IconButton, { icon: ChevronLeftIcon, onClick: () => setShowExtendedList(false), size: "xs" }) }), _jsx(ExtendedWalletList, { connectors: walletConnectors, onConnect: onConnect })] }));
    }
    return (_jsxs(_Fragment, { children: [_jsx(Banner, { config: config }), _jsxs(Box, { marginTop: "6", children: [emailConnector && (showEmailInput || isEmailOnly) ? (_jsxs("form", { onSubmit: onConnectInlineEmail, children: [_jsx(TextInput, { onChange: onChangeEmail, value: email, name: "email", placeholder: "Enter email", "data-1p-ignore": true }), _jsxs(Box, { alignItems: "center", justifyContent: "center", marginTop: "4", children: [!emailAuthInProgress && (_jsxs(Box, { gap: "2", width: "full", children: [!isEmailOnly && _jsx(Button, { label: "Back", width: "full", onClick: () => setShowEmailInput(false) }), _jsx(Button, { type: "submit", variant: "primary", disabled: !isEmailValid(email), width: "full", label: "Continue", rightIcon: ChevronRightIcon })] })), emailAuthInProgress && _jsx(Spinner, {})] })] })) : (_jsx(_Fragment, { children: socialAuthConnectors.length > 0 && (_jsx(Box, { marginTop: "2", gap: "2", flexDirection: "row", justifyContent: "center", alignItems: "center", flexWrap: "wrap", children: socialAuthConnectors.map(connector => {
                                return (_jsx(Box, { aspectRatio: "1/1", alignItems: "center", justifyContent: "center", children: connector._wallet.id === 'google-waas' ? (_jsx(GoogleWaasConnectButton, { connector: connector, onConnect: onConnect })) : connector._wallet.id === 'apple-waas' ? (_jsx(AppleWaasConnectButton, { connector: connector, onConnect: onConnect })) : connector._wallet.id.includes('email') ? (_jsx(EmailConnectButton, { onClick: () => setShowEmailInput(true) })) : (_jsx(ConnectButton, { connector: connector, onConnect: onConnect })) }, connector.uid));
                            }) })) })), walletConnectors.length > 0 && !showEmailInput && (_jsxs(_Fragment, { children: [socialAuthConnectors.length > 0 && (_jsxs(_Fragment, { children: [_jsx(Divider, { color: "backgroundSecondary" }), _jsx(Box, { justifyContent: "center", alignItems: "center", children: _jsx(Text, { variant: "small", color: "text50", children: "or select a wallet" }) })] })), _jsx(Box, { marginTop: "2", gap: "2", flexDirection: "row", justifyContent: "center", alignItems: "center", children: walletConnectors.slice(0, 7).map(connector => {
                                    return _jsx(ConnectButton, { connector: connector, onConnect: onConnect }, connector.uid);
                                }) }), displayExtendedListButton && (_jsx(Box, { marginTop: "4", justifyContent: "center", children: _jsx(Button, { shape: "square", size: "xs", onClick: () => setShowExtendedList(true), label: "More options", rightIcon: ChevronRightIcon }) }))] }))] }), _jsx(PoweredBySequence, {})] }));
};
//# sourceMappingURL=Connect.js.map