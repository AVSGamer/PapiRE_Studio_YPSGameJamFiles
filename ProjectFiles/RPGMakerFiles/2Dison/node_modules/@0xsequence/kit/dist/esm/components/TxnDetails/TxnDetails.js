import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Box, Card, GradientAvatar, Skeleton, Text, TokenImage } from '@0xsequence/design-system';
import { ContractType } from '@0xsequence/indexer';
import { ethers } from 'ethers';
import { useEffect, useState } from 'react';
import { useConfig } from 'wagmi';
import { useTokenMetadata, useBalances } from '../../hooks/data';
import { useAPIClient } from '../../hooks/useAPIClient';
import { compareAddress, capitalize } from '../../utils/helpers';
import { getNativeTokenInfoByChainId } from '../../utils/tokens';
import { DecodingType, decodeTransactions } from '../../utils/txnDecoding';
import { CollectibleTileImage } from '../CollectibleTileImage';
export const TxnDetailsSkeleton = () => {
    return (_jsxs(Box, { alignItems: "center", justifyContent: "space-between", children: [_jsxs(Box, { justifyContent: "center", alignItems: "center", gap: "2", children: [_jsx(Skeleton, { style: { width: 30, height: 30 }, borderRadius: "circle" }), _jsxs(Box, { flexDirection: "column", gap: "2", alignItems: "flex-start", children: [_jsx(Skeleton, { style: { width: 100, height: 14 } }), _jsx(Skeleton, { style: { width: 75, height: 14 } })] })] }), _jsxs(Box, { flexDirection: "column", gap: "2", alignItems: "flex-end", children: [_jsx(Skeleton, { style: { width: 100, height: 14 } }), _jsx(Skeleton, { style: { width: 50, height: 12 } })] })] }));
};
export const TxnDetails = ({ address, txs, chainId }) => {
    const apiClient = useAPIClient();
    // const { fiatCurrency } = useSettings()
    const [decodingType, setDecodingType] = useState(undefined);
    const [transferProps, setTransferProps] = useState([]);
    const [awardItemProps, setAwardItemProps] = useState([]);
    const getTxnProps = async () => {
        const decodedTxnDatas = await decodeTransactions(apiClient, address, txs);
        const type = decodedTxnDatas[0]?.type;
        setDecodingType(type);
        if (type === DecodingType.TRANSFER) {
            setTransferProps(decodedTxnDatas);
        }
        if (type === DecodingType.AWARD_ITEM) {
            setAwardItemProps(decodedTxnDatas);
        }
    };
    useEffect(() => {
        getTxnProps();
    }, []);
    if (!decodingType) {
        return _jsx(TxnDetailsSkeleton, {});
    }
    if (decodingType === DecodingType.UNKNOWN) {
        return _jsx(_Fragment, {});
    }
    if (transferProps[0]) {
        return _jsx(TransferItemInfo, { address: address, transferProps: transferProps[0], chainId: chainId });
    }
    if (awardItemProps[0]) {
        return _jsx(AwardItemInfo, { awardItemProps: awardItemProps[0] });
    }
};
const TransferItemInfo = ({ address, transferProps, chainId }) => {
    const { chains } = useConfig();
    const contractAddress = transferProps.contractAddress;
    const toAddress = transferProps.to;
    const isNativeCoin = contractAddress ? compareAddress(contractAddress, ethers.ZeroAddress) : true;
    const is1155 = transferProps.contractType === ContractType.ERC1155;
    const isNFT = transferProps.contractType === ContractType.ERC1155 || transferProps.contractType === ContractType.ERC721;
    const nativeTokenInfo = getNativeTokenInfoByChainId(chainId, chains);
    const { data: balances = [] } = useBalances({
        chainIds: [chainId],
        accountAddress: address,
        contractAddress
    });
    const { data: tokenMetadata } = useTokenMetadata(chainId, contractAddress, transferProps.tokenIds ?? []);
    const tokenBalance = contractAddress ? balances.find(b => compareAddress(b.contractAddress, contractAddress)) : undefined;
    const decimals = isNativeCoin ? nativeTokenInfo.decimals : tokenBalance?.contractInfo?.decimals || 18;
    const imageUrl = isNativeCoin
        ? nativeTokenInfo.logoURI
        : isNFT
            ? tokenMetadata?.[0]?.image
            : tokenBalance?.contractInfo?.logoURI;
    const name = isNativeCoin ? nativeTokenInfo.name : isNFT ? tokenMetadata?.[0]?.name : tokenBalance?.contractInfo?.name || '';
    const symbol = isNativeCoin ? nativeTokenInfo.symbol : isNFT ? '' : tokenBalance?.contractInfo?.symbol || '';
    const amountSending = transferProps.amounts[0] ?? transferProps.value;
    const showSquareImage = isNFT;
    return (_jsxs(Card, { children: [_jsx(Box, { marginBottom: "2", children: _jsx(Text, { variant: "medium", color: "text100", children: capitalize(transferProps.type ?? '') }) }), _jsx(Box, { alignItems: "flex-end", justifyContent: "space-between", marginBottom: "2", children: _jsxs(Box, { justifyContent: "space-between", alignItems: "center", gap: "2", children: [showSquareImage ? (_jsx(Box, { style: { width: '40px' }, children: _jsx(CollectibleTileImage, { imageUrl: imageUrl }) })) : (_jsx(TokenImage, { src: imageUrl, symbol: symbol, size: "md" })), _jsxs(Box, { flexDirection: "column", alignItems: "flex-start", children: [_jsx(Box, { flexDirection: "row", alignItems: "center", gap: "1", children: _jsx(Text, { variant: "medium", color: "text100", children: name }) }), _jsxs(Text, { color: "text50", variant: "normal", children: [' ', `${ethers.formatUnits(amountSending, is1155 ? tokenMetadata?.[0]?.decimals : isNFT ? 0 : decimals)} ${symbol} `] })] })] }) }), toAddress !== undefined && (_jsxs(Box, { children: [_jsx(Text, { variant: "normal", color: "text50", children: "To" }), _jsx(Box, { marginTop: "2", borderRadius: "md", background: "backgroundSecondary", width: "full", flexDirection: "row", justifyContent: "space-between", alignItems: "center", padding: "4", style: { height: '52px' }, children: _jsxs(Box, { flexDirection: "row", justifyContent: "center", alignItems: "center", gap: "2", children: [_jsx(GradientAvatar, { address: toAddress, style: { width: '20px' } }), _jsx(Text, { color: "text100", children: `0x${truncateAtMiddle(toAddress.substring(2), 12)}` })] }) })] }))] }));
};
// This is used only for demo purposes
const AwardItemInfo = ({ awardItemProps }) => {
    return (_jsxs(Card, { children: [_jsx(Box, { marginBottom: "2", children: _jsx(Text, { variant: "medium", color: "text100", children: "Mint" }) }), _jsx(Box, { alignItems: "flex-end", justifyContent: "space-between", marginBottom: "2", children: _jsxs(Box, { justifyContent: "space-between", alignItems: "center", gap: "2", children: [_jsx(Box, { style: { width: '40px' }, children: _jsx(CollectibleTileImage, { imageUrl: "https://dev-metadata.sequence.app/projects/277/collections/62/tokens/0/image.jpeg" }) }), _jsxs(Box, { flexDirection: "column", alignItems: "flex-start", children: [_jsx(Box, { flexDirection: "row", alignItems: "center", gap: "1", children: _jsx(Text, { variant: "medium", color: "text100", children: "Waas Demo NFT" }) }), _jsx(Text, { color: "text50", variant: "normal", children: awardItemProps.amount })] })] }) }), awardItemProps.to !== undefined && (_jsxs(Box, { children: [_jsx(Text, { variant: "normal", color: "text50", children: "To" }), _jsx(Box, { marginTop: "2", borderRadius: "md", background: "backgroundSecondary", width: "full", flexDirection: "row", justifyContent: "space-between", alignItems: "center", padding: "4", style: { height: '52px' }, children: _jsxs(Box, { flexDirection: "row", justifyContent: "center", alignItems: "center", gap: "2", children: [_jsx(GradientAvatar, { address: awardItemProps.to, style: { width: '20px' } }), _jsx(Text, { color: "text100", children: `0x${truncateAtMiddle(awardItemProps.to.substring(2), 12)}` })] }) })] }))] }));
};
const truncateAtMiddle = (text, truncateAt) => {
    let finalText = text;
    if (text.length >= truncateAt) {
        finalText = text.slice(0, truncateAt / 2) + '...' + text.slice(text.length - truncateAt / 2, text.length);
    }
    return finalText;
};
//# sourceMappingURL=TxnDetails.js.map