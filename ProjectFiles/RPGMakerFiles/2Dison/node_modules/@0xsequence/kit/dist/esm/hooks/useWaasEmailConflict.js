import { IdentityType } from '@0xsequence/waas';
import { useEffect, useRef, useState } from 'react';
import { useConnect } from 'wagmi';
const accountTypeText = (info) => {
    if (!info) {
        return 'Unknown account type';
    }
    if (info.type === IdentityType.PlayFab) {
        return 'PlayFab login';
    }
    if (info.type === IdentityType.Email) {
        return 'Email login';
    }
    if (info.type === IdentityType.OIDC) {
        switch (info.issuer) {
            case 'https://accounts.google.com':
                return 'Google login';
            case 'https://appleid.apple.com':
                return 'Apple login';
            default:
                return 'Unknown account type';
        }
    }
    return info.type;
};
export const useEmailConflict = () => {
    const { connectors } = useConnect();
    const forceCreateFuncRef = useRef(null);
    const [isOpen, toggleModal] = useState(false);
    const [emailConflictInfo, setEmailConflictInfo] = useState(null);
    const waasConnector = connectors.find(connector => !!connector.sequenceWaas);
    const waas = waasConnector?.sequenceWaas;
    useEffect(() => {
        if (waas) {
            const disposer = waas.onEmailConflict(async (info, forceCreate) => {
                forceCreateFuncRef.current = forceCreate;
                setEmailConflictInfo(info);
                toggleModal(true);
            });
            return disposer;
        }
    }, []);
    return {
        toggleEmailConflictModal: toggleModal,
        isEmailConflictOpen: isOpen,
        emailConflictInfo: {
            email: emailConflictInfo?.email ?? 'Unknown',
            type: accountTypeText(emailConflictInfo)
        },
        forceCreate: async () => {
            return forceCreateFuncRef.current?.(true);
        }
    };
};
//# sourceMappingURL=useWaasEmailConflict.js.map