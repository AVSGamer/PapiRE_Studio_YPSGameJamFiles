import { useState, useEffect } from 'react';
import { Deferred } from '../utils/deferred';
let _pendingConfirmation;
export function useWaasConfirmationHandler(waasConnector) {
    const [pendingRequestConfirmation, setPendingRequestConfirmation] = useState();
    function confirmPendingRequest(id) {
        _pendingConfirmation?.resolve({ id, confirmed: true });
        setPendingRequestConfirmation(undefined);
        _pendingConfirmation = undefined;
    }
    function rejectPendingRequest(id) {
        _pendingConfirmation?.resolve({ id, confirmed: false });
        setPendingRequestConfirmation(undefined);
        _pendingConfirmation = undefined;
    }
    useEffect(() => {
        async function setup() {
            if (!waasConnector) {
                return;
            }
            const waasProvider = waasConnector.sequenceWaasProvider;
            if (!waasProvider) {
                return;
            }
            waasProvider.requestConfirmationHandler = {
                confirmSignTransactionRequest(id, txs, chainId) {
                    const pending = new Deferred();
                    setPendingRequestConfirmation({ id, type: 'signTransaction', txs: Array.isArray(txs) ? txs : [txs], chainId });
                    _pendingConfirmation = pending;
                    return pending.promise;
                },
                confirmSignMessageRequest(id, message, chainId) {
                    const pending = new Deferred();
                    setPendingRequestConfirmation({ id, type: 'signMessage', message, chainId });
                    _pendingConfirmation = pending;
                    return pending.promise;
                }
            };
        }
        setup();
    });
    return [pendingRequestConfirmation, confirmPendingRequest, rejectPendingRequest];
}
//# sourceMappingURL=useWaasConfirmationHandler.js.map