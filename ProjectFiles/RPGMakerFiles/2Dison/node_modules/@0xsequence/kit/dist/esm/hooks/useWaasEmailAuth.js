import { useState } from 'react';
import { randomName } from '../connectors/wagmiConnectors';
export function useEmailAuth({ connector, onSuccess }) {
    if (!connector) {
        return {
            inProgress: false,
            loading: false,
            error: undefined,
            initiateAuth: async (_email) => { },
            sendChallengeAnswer: async (_answer) => { }
        };
    }
    const [email, setEmail] = useState('');
    const [error, setError] = useState();
    const [loading, setLoading] = useState(false);
    const [instance, setInstance] = useState('');
    const [respondWithCode, setRespondWithCode] = useState();
    const getSequenceWaas = () => {
        if (!connector) {
            throw new Error('Connector is not defined');
        }
        const sequenceWaas = connector.sequenceWaas;
        if (!sequenceWaas) {
            throw new Error('Connector does not support SequenceWaaS');
        }
        return sequenceWaas;
    };
    const initiateAuth = async (email) => {
        const params = connector.params;
        const waas = getSequenceWaas();
        setLoading(true);
        setError(undefined);
        waas.onEmailAuthCodeRequired(async (respondWithCode) => {
            setRespondWithCode(() => respondWithCode);
        });
        waas
            .signIn({ email }, randomName())
            .then(signInResponse => {
            onSuccess({ version: 2, signInResponse });
            if (signInResponse.email) {
                setEmail(signInResponse.email);
            }
        })
            .catch(err => {
            setError(err);
        });
        setLoading(false);
    };
    const sendChallengeAnswer = async (answer) => {
        const params = connector.params;
        const waas = getSequenceWaas();
        setLoading(true);
        setError(undefined);
        // version 2
        if (!respondWithCode) {
            throw new Error('Email v2 auth, respondWithCode is not defined');
        }
        try {
            await respondWithCode(answer);
        }
        catch (err) {
            setError(err);
        }
        finally {
            setLoading(false);
        }
    };
    const cancel = () => {
        setLoading(false);
        setRespondWithCode(null);
        setError(undefined);
    };
    return {
        inProgress: loading || !!instance,
        loading,
        error,
        initiateAuth,
        sendChallengeAnswer,
        cancel
    };
}
//# sourceMappingURL=useWaasEmailAuth.js.map