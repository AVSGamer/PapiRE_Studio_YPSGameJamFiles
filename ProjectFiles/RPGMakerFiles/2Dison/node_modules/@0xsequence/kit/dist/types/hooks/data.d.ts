import { SequenceAPIClient, Token, SwapPrice, GetSwapQuoteArgs } from '@0xsequence/api';
import { Page, SequenceIndexer, TokenBalance } from '@0xsequence/indexer';
import { ContractInfo } from '@0xsequence/metadata';
import { indexer } from '0xsequence/dist/declarations/src/sequence';
export declare const time: {
    oneSecond: number;
    oneMinute: number;
    oneHour: number;
};
export declare const getNativeTokenBalance: (indexerClient: SequenceIndexer, chainId: number, accountAddress: string) => Promise<TokenBalance>;
interface GetTokenBalancesArgs {
    accountAddress: string;
    hideCollectibles?: boolean;
    includeMetadata?: boolean;
    verifiedOnly?: boolean;
    contractAddress?: string;
}
export declare const getTokenBalances: (indexerClient: SequenceIndexer, args: GetTokenBalancesArgs) => Promise<TokenBalance[]>;
export declare const getBalances: (indexerClient: SequenceIndexer, chainId: number, args: GetTokenBalancesArgs) => Promise<TokenBalance[]>;
interface UseBalancesArgs extends GetTokenBalancesArgs {
    chainIds: number[];
}
export declare const useBalances: ({ chainIds, ...args }: UseBalancesArgs) => import("@tanstack/react-query").UseQueryResult<TokenBalance[], Error>;
interface UseCoinBalanceArgs extends GetTokenBalancesArgs {
    chainId: number;
}
export declare const useCoinBalance: (args: UseCoinBalanceArgs) => import("@tanstack/react-query").UseQueryResult<TokenBalance, Error>;
interface UseCollectibleBalanceArgs {
    accountAddress: string;
    chainId: number;
    contractAddress: string;
    tokenId: string;
    verifiedOnly?: boolean;
}
export declare const useCollectibleBalance: (args: UseCollectibleBalanceArgs) => import("@tanstack/react-query").UseQueryResult<TokenBalance, Error>;
export declare const getCollectionBalance: (indexerClient: SequenceIndexer, args: UseCollectionBalanceArgs) => Promise<TokenBalance[]>;
interface UseCollectionBalanceArgs {
    chainId: number;
    accountAddress: string;
    contractAddress: string;
    includeMetadata?: boolean;
    verifiedOnly?: boolean;
}
export declare const useCollectionBalance: (args: UseCollectionBalanceArgs) => import("@tanstack/react-query").UseQueryResult<TokenBalance[], Error>;
export declare const useExchangeRate: (toCurrency: string) => import("@tanstack/react-query").UseQueryResult<number, Error>;
export declare const getCoinPrices: (apiClient: SequenceAPIClient, tokens: Token[]) => Promise<import("@0xsequence/api").TokenPrice[]>;
export declare const useCoinPrices: (tokens: Token[], disabled?: boolean) => import("@tanstack/react-query").UseQueryResult<import("@0xsequence/api").TokenPrice[], Error>;
export declare const getCollectiblePrices: (apiClient: SequenceAPIClient, tokens: Token[]) => Promise<import("@0xsequence/api").TokenPrice[]>;
export declare const useCollectiblePrices: (tokens: Token[]) => import("@tanstack/react-query").UseQueryResult<import("@0xsequence/api").TokenPrice[], Error>;
export declare const useTokenMetadata: (chainId: number, contractAddress: string, tokenIds: string[], disabled?: boolean) => import("@tanstack/react-query").UseQueryResult<import("@0xsequence/metadata").TokenMetadata[], Error>;
export declare const useContractInfo: (chainId: number, contractAddress: string, disabled?: boolean) => import("@tanstack/react-query").UseQueryResult<{
    logoURI: string;
    symbol: string;
    name: string;
    decimals?: number;
    chainId: number;
    address: string;
    type: string;
    deployed: boolean;
    bytecodeHash: string;
    extensions: import("@0xsequence/metadata").ContractInfoExtensions;
    updatedAt: string;
}, Error>;
export interface GetTransactionHistoryArgs {
    accountAddress: string;
    contractAddress?: string;
    tokenId?: string;
    page?: Page;
}
export declare const getTransactionHistory: (indexerClient: SequenceIndexer, { contractAddress, accountAddress, tokenId, page }: GetTransactionHistoryArgs) => Promise<indexer.GetTransactionHistoryReturn>;
interface UseTransactionHistoryArgs {
    chainId: number;
    accountAddress: string;
    contractAddress?: string;
    tokenId?: string;
    disabled?: boolean;
}
export declare const useTransactionHistory: (args: UseTransactionHistoryArgs) => import("@tanstack/react-query").UseInfiniteQueryResult<import("@tanstack/react-query").InfiniteData<indexer.GetTransactionHistoryReturn, unknown>, Error>;
interface Balance {
    balance: string;
}
export type SwapPricesWithCurrencyInfo = {
    price: SwapPrice;
    info: ContractInfo | undefined;
    balance: Balance;
};
interface UseSwapPricesArgs {
    userAddress: string;
    buyCurrencyAddress: string;
    buyAmount: string;
    chainId: number;
    withContractInfo?: boolean;
}
interface SwapPricesOptions {
    disabled?: boolean;
}
export declare const useSwapPrices: (args: UseSwapPricesArgs, options: SwapPricesOptions) => import("@tanstack/react-query").UseQueryResult<SwapPricesWithCurrencyInfo[], Error>;
interface UseSwapQuoteOptions {
    disabled?: boolean;
}
export declare const useSwapQuote: (args: GetSwapQuoteArgs, options: UseSwapQuoteOptions) => import("@tanstack/react-query").UseQueryResult<import("@0xsequence/api").SwapQuote, Error>;
export {};
//# sourceMappingURL=data.d.ts.map