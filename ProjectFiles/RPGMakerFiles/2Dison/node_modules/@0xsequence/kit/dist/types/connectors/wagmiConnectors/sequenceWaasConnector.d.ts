import { EIP1193Provider } from '@0xsequence/network';
import { SequenceWaaS, SequenceConfig, ExtendedSequenceConfig, Transaction, FeeOption } from '@0xsequence/waas';
import { ethers } from 'ethers';
export interface SequenceWaasConnectConfig {
    googleClientId?: string;
    appleClientId?: string;
    appleRedirectURI?: string;
    enableConfirmationModal?: boolean;
    loginType: 'email' | 'google' | 'apple';
    isDev?: boolean;
}
export type BaseSequenceWaasConnectorOptions = SequenceConfig & SequenceWaasConnectConfig & Partial<ExtendedSequenceConfig>;
export declare function sequenceWaasWallet(params: BaseSequenceWaasConnectorOptions): import("wagmi").CreateConnectorFn<SequenceWaasProvider, {
    sequenceWaas: SequenceWaaS;
    sequenceWaasProvider: SequenceWaasProvider;
    params: BaseSequenceWaasConnectorOptions;
}, {
    "@kit.waasActiveLoginType": string;
    "@kit.waasGoogleIdToken": string;
    "@kit.waasEmailIdToken": string;
    "@kit.waasAppleIdToken": string;
    "@kit.waasGoogleClientId": string;
    "@kit.waasAppleClientId": string;
    "@kit.waasAppleRedirectURI": string;
    "@kit.waasSignInEmail": string;
}>;
export declare namespace sequenceWaasWallet {
    var type: "sequence-waas";
}
export declare class SequenceWaasProvider extends ethers.AbstractProvider implements EIP1193Provider {
    sequenceWaas: SequenceWaaS;
    showConfirmation: boolean;
    nodesUrl: string;
    jsonRpcProvider: ethers.JsonRpcProvider;
    requestConfirmationHandler: WaasRequestConfirmationHandler | undefined;
    feeConfirmationHandler: WaasFeeOptionConfirmationHandler | undefined;
    currentNetwork: ethers.Network;
    constructor(sequenceWaas: SequenceWaaS, showConfirmation: boolean, nodesUrl: string);
    request({ method, params }: {
        method: string;
        params?: any[];
    }): Promise<any>;
    getTransaction(txHash: string): Promise<ethers.TransactionResponse | null>;
    detectNetwork(): Promise<ethers.Network>;
    getChainId(): number;
    checkTransactionFeeOptions({ transactions, chainId }: {
        transactions: Transaction[];
        chainId: number;
    }): Promise<{
        feeQuote: string | undefined;
        feeOptions: FeeOption[] | undefined;
        isSponsored: boolean;
    }>;
}
export interface WaasRequestConfirmationHandler {
    confirmSignTransactionRequest(id: string, txs: ethers.Transaction[], chainId: number): Promise<{
        id: string;
        confirmed: boolean;
    }>;
    confirmSignMessageRequest(id: string, message: string, chainId: number): Promise<{
        id: string;
        confirmed: boolean;
    }>;
}
export interface WaasFeeOptionConfirmationHandler {
    confirmFeeOption(id: string, options: FeeOption[], txs: ethers.Transaction[], chainId: number): Promise<{
        id: string;
        feeTokenAddress?: string | null;
        confirmed: boolean;
    }>;
}
export declare function randomName(): string;
//# sourceMappingURL=sequenceWaasConnector.d.ts.map